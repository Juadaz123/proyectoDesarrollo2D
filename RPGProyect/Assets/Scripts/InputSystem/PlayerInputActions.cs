//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/PlayerInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""4e3d0f1f-a0c6-4939-b7bc-2245424606b9"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Button"",
                    ""id"": ""362dd505-f365-4e9c-a3f7-4f71817d31db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ataque 1"",
                    ""type"": ""Button"",
                    ""id"": ""5774664b-288b-4e3b-9065-07399ab39fa4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ataque 2"",
                    ""type"": ""Button"",
                    ""id"": ""1768a4cd-2fa8-4d8c-90f4-a89a2d64b477"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ataque 3"",
                    ""type"": ""Button"",
                    ""id"": ""0a1dd86c-5030-464d-85ad-9c66e562dc33"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ataque 4"",
                    ""type"": ""Button"",
                    ""id"": ""97c8b6d0-70df-439a-af5d-6f5255c5340f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ataque0 (Mover)"",
                    ""type"": ""Button"",
                    ""id"": ""dbe2febf-eafe-45b5-bc8b-9f8383cad6ec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd93f144-0d39-4864-95f2-823d1f9093ad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c6091b-60d0-41b5-bcfe-0a2522b180c5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e943e13-2737-4fca-b402-d83c0afd968d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37139bb5-dea8-4abb-823f-3a0f8870ba2b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dda3095-a90d-432e-89f9-78bb36833865"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d17bc065-10e7-4e1d-a423-3ed704252f5b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a60321b1-dc45-423b-abce-91b6d7d858fa"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c6e849e-1528-44c2-81cb-c63b535b69cc"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7b4ad16-e706-4005-b187-f26034dee7ac"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b0546d8-81d5-4283-a55e-c9eb9d35152a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque0 (Mover)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement Free"",
            ""id"": ""73b76fd7-15e0-49f9-b8ee-78e5f67677f5"",
            ""actions"": [
                {
                    ""name"": ""movimiento"",
                    ""type"": ""Button"",
                    ""id"": ""212898f3-2fce-43fb-a165-999aae5974f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""interactuar"",
                    ""type"": ""Button"",
                    ""id"": ""fc17d43d-384f-4cd5-a845-b12e585841da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a38b224-ab36-4f32-9ec3-49f869fcee0d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(pressPoint=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48db3bd0-feec-474d-8bb0-8cd0d3f31b16"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""899beee7-dff4-41eb-b9fb-41b12d506ebc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""064cdaeb-8d9d-45e5-a1dd-090c4dfeedb0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Mover = m_Gameplay.FindAction("Mover", throwIfNotFound: true);
        m_Gameplay_Ataque1 = m_Gameplay.FindAction("Ataque 1", throwIfNotFound: true);
        m_Gameplay_Ataque2 = m_Gameplay.FindAction("Ataque 2", throwIfNotFound: true);
        m_Gameplay_Ataque3 = m_Gameplay.FindAction("Ataque 3", throwIfNotFound: true);
        m_Gameplay_Ataque4 = m_Gameplay.FindAction("Ataque 4", throwIfNotFound: true);
        m_Gameplay_Ataque0Mover = m_Gameplay.FindAction("Ataque0 (Mover)", throwIfNotFound: true);
        // Movement Free
        m_MovementFree = asset.FindActionMap("Movement Free", throwIfNotFound: true);
        m_MovementFree_movimiento = m_MovementFree.FindAction("movimiento", throwIfNotFound: true);
        m_MovementFree_interactuar = m_MovementFree.FindAction("interactuar", throwIfNotFound: true);
    }

    ~@PlayerInputAction()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerInputAction.Gameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MovementFree.enabled, "This will cause a leak and performance issues, PlayerInputAction.MovementFree.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Mover;
    private readonly InputAction m_Gameplay_Ataque1;
    private readonly InputAction m_Gameplay_Ataque2;
    private readonly InputAction m_Gameplay_Ataque3;
    private readonly InputAction m_Gameplay_Ataque4;
    private readonly InputAction m_Gameplay_Ataque0Mover;
    /// <summary>
    /// Provides access to input actions defined in input action map "Gameplay".
    /// </summary>
    public struct GameplayActions
    {
        private @PlayerInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GameplayActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Mover".
        /// </summary>
        public InputAction @Mover => m_Wrapper.m_Gameplay_Mover;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Ataque1".
        /// </summary>
        public InputAction @Ataque1 => m_Wrapper.m_Gameplay_Ataque1;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Ataque2".
        /// </summary>
        public InputAction @Ataque2 => m_Wrapper.m_Gameplay_Ataque2;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Ataque3".
        /// </summary>
        public InputAction @Ataque3 => m_Wrapper.m_Gameplay_Ataque3;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Ataque4".
        /// </summary>
        public InputAction @Ataque4 => m_Wrapper.m_Gameplay_Ataque4;
        /// <summary>
        /// Provides access to the underlying input action "Gameplay/Ataque0Mover".
        /// </summary>
        public InputAction @Ataque0Mover => m_Wrapper.m_Gameplay_Ataque0Mover;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GameplayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @Ataque1.started += instance.OnAtaque1;
            @Ataque1.performed += instance.OnAtaque1;
            @Ataque1.canceled += instance.OnAtaque1;
            @Ataque2.started += instance.OnAtaque2;
            @Ataque2.performed += instance.OnAtaque2;
            @Ataque2.canceled += instance.OnAtaque2;
            @Ataque3.started += instance.OnAtaque3;
            @Ataque3.performed += instance.OnAtaque3;
            @Ataque3.canceled += instance.OnAtaque3;
            @Ataque4.started += instance.OnAtaque4;
            @Ataque4.performed += instance.OnAtaque4;
            @Ataque4.canceled += instance.OnAtaque4;
            @Ataque0Mover.started += instance.OnAtaque0Mover;
            @Ataque0Mover.performed += instance.OnAtaque0Mover;
            @Ataque0Mover.canceled += instance.OnAtaque0Mover;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GameplayActions" />
        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @Ataque1.started -= instance.OnAtaque1;
            @Ataque1.performed -= instance.OnAtaque1;
            @Ataque1.canceled -= instance.OnAtaque1;
            @Ataque2.started -= instance.OnAtaque2;
            @Ataque2.performed -= instance.OnAtaque2;
            @Ataque2.canceled -= instance.OnAtaque2;
            @Ataque3.started -= instance.OnAtaque3;
            @Ataque3.performed -= instance.OnAtaque3;
            @Ataque3.canceled -= instance.OnAtaque3;
            @Ataque4.started -= instance.OnAtaque4;
            @Ataque4.performed -= instance.OnAtaque4;
            @Ataque4.canceled -= instance.OnAtaque4;
            @Ataque0Mover.started -= instance.OnAtaque0Mover;
            @Ataque0Mover.performed -= instance.OnAtaque0Mover;
            @Ataque0Mover.canceled -= instance.OnAtaque0Mover;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />.
        /// </summary>
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
        /// <seealso cref="GameplayActions.UnregisterCallbacks(IGameplayActions)" />
        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GameplayActions" /> instance referencing this action map.
    /// </summary>
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Movement Free
    private readonly InputActionMap m_MovementFree;
    private List<IMovementFreeActions> m_MovementFreeActionsCallbackInterfaces = new List<IMovementFreeActions>();
    private readonly InputAction m_MovementFree_movimiento;
    private readonly InputAction m_MovementFree_interactuar;
    /// <summary>
    /// Provides access to input actions defined in input action map "Movement Free".
    /// </summary>
    public struct MovementFreeActions
    {
        private @PlayerInputAction m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MovementFreeActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "MovementFree/movimiento".
        /// </summary>
        public InputAction @movimiento => m_Wrapper.m_MovementFree_movimiento;
        /// <summary>
        /// Provides access to the underlying input action "MovementFree/interactuar".
        /// </summary>
        public InputAction @interactuar => m_Wrapper.m_MovementFree_interactuar;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_MovementFree; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MovementFreeActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MovementFreeActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MovementFreeActions" />
        public void AddCallbacks(IMovementFreeActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementFreeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementFreeActionsCallbackInterfaces.Add(instance);
            @movimiento.started += instance.OnMovimiento;
            @movimiento.performed += instance.OnMovimiento;
            @movimiento.canceled += instance.OnMovimiento;
            @interactuar.started += instance.OnInteractuar;
            @interactuar.performed += instance.OnInteractuar;
            @interactuar.canceled += instance.OnInteractuar;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MovementFreeActions" />
        private void UnregisterCallbacks(IMovementFreeActions instance)
        {
            @movimiento.started -= instance.OnMovimiento;
            @movimiento.performed -= instance.OnMovimiento;
            @movimiento.canceled -= instance.OnMovimiento;
            @interactuar.started -= instance.OnInteractuar;
            @interactuar.performed -= instance.OnInteractuar;
            @interactuar.canceled -= instance.OnInteractuar;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MovementFreeActions.UnregisterCallbacks(IMovementFreeActions)" />.
        /// </summary>
        /// <seealso cref="MovementFreeActions.UnregisterCallbacks(IMovementFreeActions)" />
        public void RemoveCallbacks(IMovementFreeActions instance)
        {
            if (m_Wrapper.m_MovementFreeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MovementFreeActions.AddCallbacks(IMovementFreeActions)" />
        /// <seealso cref="MovementFreeActions.RemoveCallbacks(IMovementFreeActions)" />
        /// <seealso cref="MovementFreeActions.UnregisterCallbacks(IMovementFreeActions)" />
        public void SetCallbacks(IMovementFreeActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementFreeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementFreeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MovementFreeActions" /> instance referencing this action map.
    /// </summary>
    public MovementFreeActions @MovementFree => new MovementFreeActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Gameplay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GameplayActions.AddCallbacks(IGameplayActions)" />
    /// <seealso cref="GameplayActions.RemoveCallbacks(IGameplayActions)" />
    public interface IGameplayActions
    {
        /// <summary>
        /// Method invoked when associated input action "Mover" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMover(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ataque 1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtaque1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ataque 2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtaque2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ataque 3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtaque3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ataque 4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtaque4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ataque0 (Mover)" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAtaque0Mover(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Movement Free" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MovementFreeActions.AddCallbacks(IMovementFreeActions)" />
    /// <seealso cref="MovementFreeActions.RemoveCallbacks(IMovementFreeActions)" />
    public interface IMovementFreeActions
    {
        /// <summary>
        /// Method invoked when associated input action "movimiento" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovimiento(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "interactuar" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteractuar(InputAction.CallbackContext context);
    }
}
